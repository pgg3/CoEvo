{
  "sample_order": 921,
  "function": "def equation(strain: np.ndarray, temp: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for stress in Aluminium rod\n\n    Args:\n        strain: A numpy array representing observations of strain.\n        temp: A numpy array representing observations of temperature.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing stress as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Improved version of `equation_v1` which enhances accuracy in stress calculation in Aluminium rod.\n\n    Args:\n        strain: A numpy array representing observations of strain.\n        temp: A numpy array representing observations of temperature.\n        params: Array of numeric constants for optimization.\n\n    Return:\n        A numpy array representing stress as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \n    # Unpack parameters\n    E = params[0]  # Young's Modulus (Pa)\n    yield_stress = params[1]  # Yield Stress (Pa)\n    hardening_coefficient = params[2]  # Hardening Coefficient (Pa)\n    temperature_factor = params[3]  # Temperature-related factor on yield stress (Pa/°C)\n    strain_rate_factor = params[4]  # Factor to account for strain rate effects (dimensionless)\n    saturation_stress = params[5]  # Maximum attainable stress (Pa) for plastic deformation\n        \n    # Adjust yield stress for temperature\n    adjusted_yield_stress = yield_stress - temperature_factor * temp\n    \n    # Calculate effective yield stress accounting for strain rate\n    effective_yield_stress = adjusted_yield_stress * (1 + strain_rate_factor * np.abs(strain))\n    \n    # Calculate stress based on the regions\n    stress = np.where(\n        strain < effective_yield_stress / E,  # Elastic region check\n        E * strain,  # Stress in elastic region according to Hooke's Law (σ = E * ε)\n        effective_yield_stress + hardening_coefficient * (strain - effective_yield_stress / E)  # Plastic region\n    )\n    \n    # Apply saturation limit for plastic stress\n    stress = np.where(stress > saturation_stress, saturation_stress, stress)\n\n    # Ensure stress values do not go below zero\n    stress = np.clip(stress, 0, None)\n    \n    return stress\n\n",
  "score": -0.0016127817866556215
}
