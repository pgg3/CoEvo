{
  "sample_order": 1954,
  "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Refined version of the acceleration function for a damped nonlinear oscillator.\"\"\"\n    \n    # Damping term: proportional to velocity\n    damping = -params[0] * v  # Linear damping (b*v)\n\n    # Linear restoring force (Hooke's law): proportional to position\n    linear_restoring = -params[1] * x  # Linear restoring force (k*x)\n\n    # Nonlinear restoring force (quadratic or cubic), e.g., Duffing oscillator\n    nonlinear_restoring = -params[2] * x**2 - params[3] * x**3  # Nonlinear restoring forces (k2*x^2 + k3*x^3)\n\n    # Nonlinear damping term proportional to the square of velocity\n    nonlinear_damping = -params[4] * np.sign(v) * (np.abs(v) ** 2)  # Quadratic damping: b2 * v^2\n\n    # External driving force: can be sinusoidal (or harmonic)\n    driving_force = params[5] * np.sin(params[6] * t + params[7])  # Harmonic force with amplitude, frequency, and phase\n\n    # Additional constant force, simulating gravitational effects or other constants\n    constant_force = params[8]  # Any constant force\n\n    # Combination of position- and velocity-dependent mixed forces\n    mixed_force = params[9] * x * v  # Mixed interaction term (position * velocity) \n\n    # Combine all the terms to compute the total acceleration\n    acceleration = (damping + \n                    linear_restoring + \n                    nonlinear_restoring + \n                    nonlinear_damping + \n                    driving_force + \n                    constant_force + \n                    mixed_force)\n    \n    return acceleration\n\n",
  "score": -2.546379730811823e-07
}
