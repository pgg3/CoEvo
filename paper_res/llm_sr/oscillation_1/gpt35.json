{
  "sample_order": 1439,
  "function": "def equation(x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    restoring_force = params[0] * x\n    damping_force = -params[1] * v\n    nonlinear_restoring = params[2] * x**3\n    periodic_force = params[3] * np.cos(x)\n    nonlinear_damping = params[4] * np.sin(v)\n    coupling = params[5] * x * v\n    exponential_damping = params[6] * np.exp(-params[7] * x)\n    nonlinear_velocity = params[8] * v**3\n    constant_driving = params[9]\n    \n    # Calculate the total acceleration by summing all components\n    acceleration = (\n        restoring_force +\n        damping_force +\n        nonlinear_restoring +\n        periodic_force +\n        nonlinear_damping +\n        coupling +\n        exponential_damping +\n        nonlinear_velocity +\n        constant_driving\n    )\n    \n    return acceleration  # Return the calculated acceleration for the given system.\n\n",
  "score": -6.0201102319477665e-09
}
